<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>首页标题 on OverlookArt</title><link>http://example.org/</link><description>Recent content in 首页标题 on OverlookArt</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>OverlookArt</copyright><lastBuildDate>Sat, 18 Feb 2023 23:13:57 +0800</lastBuildDate><atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugo Functions</title><link>http://example.org/hugo/functions/</link><pubDate>Mon, 27 Feb 2023 17:55:54 +0800</pubDate><guid>http://example.org/hugo/functions/</guid><description>Hugo 模版中的方法 Hugo 的相关数据 // 生成 hugo 版本的 &amp;lt;meta&amp;gt; 标签 {{printf &amp;#34;%#v&amp;#34; hugo.Generator}} // 获取 hugo 的版本号 {{ printf &amp;#34;%#v&amp;#34; hugo.Version }} // 获取构建 hugo 的 go语言的版本号 {{ printf &amp;#34;%#v&amp;#34; hugo.GoVersion }} // 获取 hugo 当前运行环境 {{ printf &amp;#34;%#v&amp;#34; hugo.Environment }} 创建一个数组 {{ $array := slice &amp;#34;item1&amp;#34; &amp;#34;item2&amp;#34; &amp;#34;item3&amp;#34; }} {{ printf &amp;#34;%#v&amp;#34; $array }}</description></item><item><title>Sortablejs+ElTable 拖拽</title><link>http://example.org/h5web/vue3sortablejseltable/</link><pubDate>Mon, 27 Feb 2023 11:29:51 +0800</pubDate><guid>http://example.org/h5web/vue3sortablejseltable/</guid><description>Sortablejs+ElTable 拖拽 element plus + sortablejs 实现表格拖拽功能
安装 sortablejs $ npm i sortablejs --save 在 Vue 中引入 sortablejs import Sortable from &amp;#34;sortablejs&amp;#34; 为拖拽的 table 配置 ref 和 row-key &amp;lt;el-table :data=&amp;#34;datas&amp;#34; ref=&amp;#34;dragTable&amp;#34; row-key=&amp;#34;dragTable&amp;#34;&amp;gt; &amp;lt;/el-table&amp;gt; const dragTable = ref(); 创建拖拽表格实例 const createDragTable = () =&amp;gt; { //引用的元素 通过 css 选择器 查到 table 元素 var table = dragTable.value.$el.querySelector(&amp;#39;.el-table__body-wrapper tbody&amp;#39;); if(!table){ return; } //创建表格拖拽 var dTable = Sortable.create(table, { animation:150, onStart: () =&amp;gt; { //开始拖拽 }, onMove: (val) =&amp;gt; { /** * 拖拽中 * val.</description></item><item><title>Vue3 对 Dom 元素的引用</title><link>http://example.org/h5web/vue3domref/</link><pubDate>Mon, 27 Feb 2023 11:13:38 +0800</pubDate><guid>http://example.org/h5web/vue3domref/</guid><description>Vue3中对Dom元素引用 基本引用 在 html 中设置要引用元素的 ref &amp;lt;el-form ref=&amp;#34;formRef&amp;#34;/&amp;gt; 在脚本中声明并使用 // 声明对表单的引用 const formRef = ref(); //清除表单的验证字段 formRef.value.clearValidate([&amp;#39;name&amp;#39;]); 高级引用 在 html 中设置动态的 ref &amp;lt;el-tree :ref=&amp;#34;(el) =&amp;gt; setTreeRef(el, index)&amp;#34;/&amp;gt; 在脚本中声明并使用 //声明存储引用的数组 var refTrees = []; // 实现动态设置 ref 的方法,并将引用存储 const setTreeRef(el, index) =&amp;gt; { // 判断 dom 元素是否有效 if (el) { // 以 className 的方式为元素设置标记 el.className = &amp;#39;ref-tree-&amp;#39; + index; // 储存到引用数组中 refTrees.push(el); } } // 使用动态引用 const useTreeRef(index) =&amp;gt; { var refTree; refTrees.</description></item><item><title>Node 版本管理</title><link>http://example.org/h5web/nodeversionmanage/</link><pubDate>Mon, 27 Feb 2023 11:02:34 +0800</pubDate><guid>http://example.org/h5web/nodeversionmanage/</guid><description>Node 版本管理 全局安装 n $ npm install -g n 安装最新版 $ n latest 安装最新稳定版 $ n stable 安装某个版本 $ n 10.13.0 删除某个版本 $ n rm 10.13.0 切换版本 $ n 10.13.0 以指定的版本来执行脚本 $ n use 10.13.0 test.js 查看已安装版本 $ n ls 查看服务器上所有可用的版本 $ n ls-remote --all</description></item><item><title>Javascript 常用脚本</title><link>http://example.org/h5web/javascript/</link><pubDate>Mon, 27 Feb 2023 10:27:01 +0800</pubDate><guid>http://example.org/h5web/javascript/</guid><description>Javascript 常用脚本 格式化时间[Date] Date.prototype.Format = function (fmt) { //author: meizz var o = { &amp;#34;M+&amp;#34;: this.getMonth() + 1, //月份 &amp;#34;d+&amp;#34;: this.getDate(), //日 &amp;#34;h+&amp;#34;: this.getHours(), //小时 &amp;#34;m+&amp;#34;: this.getMinutes(), //分 &amp;#34;s+&amp;#34;: this.getSeconds(), //秒 &amp;#34;q+&amp;#34;: Math.floor((this.getMonth() + 3) / 3), //季度 &amp;#34;S&amp;#34;: this.getMilliseconds() //毫秒 }; if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + &amp;#34;&amp;#34;).substr(4 - RegExp.$1.length)); for (var k in o) if (new RegExp(&amp;#34;(&amp;#34; + k + &amp;#34;)&amp;#34;).test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ?</description></item><item><title>Mitmproxy</title><link>http://example.org/terminal/mitmproxy/</link><pubDate>Sun, 26 Feb 2023 22:37:35 +0800</pubDate><guid>http://example.org/terminal/mitmproxy/</guid><description>mitmproxy 官网 https://www.mitmproxy.org
安装 $ bres install mitmproxy
使用 启动工具 设置代理 Safari 浏览器 移动设备 配置证书 抓包验证 快捷键 ? 打开快捷键操作列表 q 返回上一页 ⬆️ ⬇️ 在抓包列表切换请求 Enter 进入&amp;gt;&amp;gt;标记的请求详情 ⬅️ ➡️ 在请求详情切换面板 z 清空抓包列表 e 查看事件日志</description></item><item><title>HomeBrew</title><link>http://example.org/terminal/homebrew/</link><pubDate>Sun, 26 Feb 2023 22:34:14 +0800</pubDate><guid>http://example.org/terminal/homebrew/</guid><description>HomeBrew macOS（或 Linux）缺失的软件包的管理器
官网 https://brew.sh
安装 /bin/bash -c &amp;ldquo;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;quot;
更新 $ brew update
查看版本 $ brew -v
卸载 使用 安装工具包 $ brew install wget
安装目录 Homebrew 会将软件包安装到独立目录，并将其文件软链接至 /usr/local 。
$ cd /usr/local $ find Cellar Cellar/wget/1.16.1 Cellar/wget/1.16.1/bin/wget Cellar/wget/1.16.1/share/man/man1/wget.1 $ ls -l bin bin/wget -&amp;gt; ../Cellar/wget/1.16.1/bin/wget 卸载工具包 $ brew uninstall packageName
查询可用包 $ brew search packageName
查看已安装包列表 $ brew list
查看任意包信息 $ brew info packageName</description></item><item><title>Mermaid Markdown 绘图</title><link>http://example.org/markdown/mermaid/</link><pubDate>Sun, 26 Feb 2023 22:27:20 +0800</pubDate><guid>http://example.org/markdown/mermaid/</guid><description>Mermaid语法 流程图 关键词 graph
方向词 TB 从上到下
BT 从下到上
LR 从左到右
RL 从右到左
节点形状 [矩形]
[]
序列图 关键词 sequenceDiagram
甘特图 关键词 gantt
饼状图 关键词 pie
pie &amp;#34;123&amp;#34; : 20 &amp;#34;231&amp;#34; : 80 类图 关键词 classDiagram
状态图 关键词 stateDiagram
路程图 关键词 journey</description></item><item><title>Custom Hugo Theme</title><link>http://example.org/hugo/customtheme/</link><pubDate>Sun, 26 Feb 2023 00:02:48 +0800</pubDate><guid>http://example.org/hugo/customtheme/</guid><description>自定义 Hugo 主题 创建一个主题 # 在项目根目录下执行 $ hugo new theme [newTheme] #会在项目的主题文件夹下创建对应名字的主题 /theme/newTheme/ # 在配置文件设置新创建的主题 /config.toml theme = &amp;#39;newTheme&amp;#39; #启动项目后生效 文件结构说明 ./theme # 项目的主题目录 |--newTheme #新建的主题目录 |--archetypes #新建页面时的扉页模版 |--|--default.md #默认的扉页模版 |--|--posts.md # 在 posts 分组下新建页面的扉页模版 优先级比 default 高 |--assets # Hugo Pipes 的资源(css, js),通过.Permalink,.RelPermalink 引用发布到项目 public |--|--style.css # 主题用到的 css 文件 |--layout #页面的模版文件 |--|_default # 页面默认默认模版位置 |--|--|--baseof.html #站点的主框架,首先要加载的内容 |--|--|--index.html #首页模版 Kind 为 home 的页面会匹配该模版 |--|--|--list.html #分组模版 Kind 为 section 的页面会匹配该模版 |--|--|--single.</description></item><item><title>markdown 基本语法</title><link>http://example.org/markdown/basicgrammar/</link><pubDate>Sat, 18 Feb 2023 21:39:09 +0800</pubDate><guid>http://example.org/markdown/basicgrammar/</guid><description>[# ]标题语法 [## ]二级标题 [### ]三级标题 [#### ]四级标题 最小到六级标题 注意空格 [可选]一级标题语法 [可选]二级标题语法 换行语法 在一行的末尾添加两个或多个空格，然后按回车键,即可创建一个换行
段落语法 使用空白行 将一行或多行文本进行分隔
引用语法 [&amp;gt; ]引用语法注意空格
多段落引用 为段落之间的空白行添加一个[&amp;gt; ]
[&amp;gt;&amp;gt; ]多级引用
[&amp;gt;&amp;gt;&amp;gt; ]多级引用
强调语法 粗体 单词或短语的前后各添加[**]或[__] 加粗1 加粗2
在单词或短语中间部分加粗的话，请使用[**]
斜体 在单词或短语前后添加[*]或[_] 斜体1 斜体2
在单词或短语中间部分加粗的话，请使用[*] 我的小斜体呀
粗体+斜体 在单词或短语的前后各添加***或___ 粗斜体1 粗斜体2
在单词或短语中间部分加粗斜体的话，请使用[***] 我加了一个粗斜体
删除 单词或短语的前后各添加[~~] 删除
列表 有序列表 在每个列表项前添加[1. ]。数字不必按数学顺序排列，但是列表应当以数字 1 起始,注意空格
第一项 第一小项 继续往下延伸 还能继续吗 第二项 无序列表 在每个列表项前面添加[- ]、[* ] 或[+ ] 。缩进一个或多个列表项可创建嵌套列表，注意空格
处理同一列表中的不同分隔符。为了兼容性，不要在同一级列表中混合和匹配分隔
我是一张弓 开弓没有回头箭 让箭飞一会 站似一棵树 定义列表 定义列表:在第一行上键入术语。在下一行，键入一个冒号，后跟一个空格和定义</description></item><item><title>HUGO</title><link>http://example.org/hugo/hugo/</link><pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate><guid>http://example.org/hugo/hugo/</guid><description>HUGO 快速使用 # 安装 $ brew install hugo # 查看安装的版本 $ hugo version # 生成站点 $ hugo new site # 下载主题 $ git submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke # 配置主题 $ echo &amp;#34;theme = &amp;#39;ananke&amp;#39;&amp;#34; &amp;gt;&amp;gt; config.toml # 添加页面 $ hugo new posts/my-first-post.md # 运行调试 $ hugo serve $ hugo server -D # 编译 $ hugo $ hugo -D #编译正在开发的文章 $ hugo -E #编译已经过期的文章 $ hugo -F #编译即将发布的文章 部署到 Github 创建 Github 账号 创建 博客代码仓库 配置仓库名称 设置仓库明为 Github用户名.</description></item><item><title>About</title><link>http://example.org/about/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>http://example.org/about/</guid><description>Hi there, see you!</description></item></channel></rss>